# -*- coding: utf-8 -*-
"""Exercises_4. ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eUEyfn4G0fUB_Ty9mH5WxHQnikwYbV1D
"""

import pandas as pd
import numpy as np
from scipy import stats
from sklearn.impute import KNNImputer, SimpleImputer
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from scipy.signal import medfilt
from scipy.stats.mstats import winsorize
from sklearn.feature_selection import mutual_info_regression, SelectKBest, f_regression
import matplotlib.pyplot as plt
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LassoCV

df = pd.read_csv('/content/data2.csv')

# Display the first few rows of the dataset
df.head()

#Identify Missing Values
df.isnull().sum()

"""Impute missing values"""

# Impute with Mode
for col in ['Income', 'Security_code']:
    df[col].fillna(df[col].mode()[0], inplace=True)

# Median imputation
df['Fraud'].fillna(df['Fraud'].median(), inplace=True)

# Example for KNN or regression
numeric_imputer = SimpleImputer(strategy='mean')
df['Fraud'] = numeric_imputer.fit_transform(df[['Fraud']])

print(df.isnull().sum())

"""Scaling Data:"""

# Assuming 'numeric_features' is a list of your numerical columns
numeric_features = ['Credit_card_number','Fraud']  # Replace with your actual columns
scaler = StandardScaler()
df[numeric_features] = scaler.fit_transform(df[numeric_features])

# Assuming 'numeric_features' is a list of your numerical columns
scaler = MinMaxScaler()
df[numeric_features] = scaler.fit_transform(df[numeric_features])

"""Handling Noise:"""

# Select the numerical feature to add noise to (e.g., 'Credit_card_number')
feature_to_noise = 'Credit_card_number'

# Generate random noise (e.g., Gaussian noise)
noise = np.random.normal(0, 1, df.shape[0])  # Adjust mean and std as needed

# Add the noise to the selected feature
df[feature_to_noise] = df[feature_to_noise] + noise

# Apply a moving average with a window size of 3 (adjust as needed)
df['smoothed_feature'] = df[feature_to_noise].rolling(window=3, center=True).mean()

# Apply median filtering with a kernel size of 3 (adjust as needed)
df['smoothed_feature'] = medfilt(df[feature_to_noise], kernel_size=3)

"""Handling Outliers:"""

# Calculate Z-scores for numeric features
z = np.abs(stats.zscore(df[numeric_features]))

# Define a threshold (e.g., 3)
threshold = 3

# Identify outliers
outliers = np.where(z > threshold)

# Filter out outlier rows
df_no_outliers = df[(z < threshold).all(axis=1)]


#df_no_outliers = df[(np.abs(stats.zscore(df[numeric_features])) < threshold).all(axis=1)]
#transformation.
for feature in numeric_features:
       df[feature] = winsorize(df[feature], limits=[0.05, 0.05])

"""Feature Selection:"""

#------------Filter Methods: Correlation and Mutual Information----------------

target_variable = 'Fraud'  # Replace with your actual target column name
X = df.drop(columns=[target_variable])  # Features
y = df[target_variable]  # Target

# Select only numeric features from X
numeric_features = X.select_dtypes(include=np.number).columns
X_numeric = X[numeric_features]  # Subset X to include only numeric features

# Calculate correlations between numeric features and target
correlations = X_numeric.corrwith(y)

# Select features with absolute correlation above a threshold (e.g., 0.5)
selected_features_corr = correlations[abs(correlations) > 0.5].index.tolist()

# Print selected features
print("Selected Features (Correlation):", selected_features_corr)

#To see p-values:
from sklearn.feature_selection import f_regression
F, p_values = f_regression(X_numeric, y) #Pass only numeric features
print("P-values:", p_values) #features with low p-values are more important


#-----------------Wrapper Methods----------------

# Use RFE for feature selection
model = LinearRegression()
selector = RFE(model, n_features_to_select=5)  # Select top 5 features
X_selected_rfe = selector.fit_transform(df[numeric_features], df['Fraud'])
selected_features_rfe = df[numeric_features].columns[selector.support_]

#-----------------Embedded Methods---------------
# Fit Lasso model for feature selection
lasso = LassoCV()
lasso.fit(df[numeric_features], df['Fraud'])  # Replace 'target'

# Get non-zero coefficients
selected_features_lasso = df[numeric_features].columns[lasso.coef_ != 0]